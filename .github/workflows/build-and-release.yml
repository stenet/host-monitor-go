name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            ext: ""
          - os: linux
            arch: arm64
            ext: ""
          - os: windows
            arch: amd64
            ext: ".exe"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install cross-compilation tools for ARM64
      if: matrix.arch == 'arm64' && matrix.os == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Get dependencies
      run: go mod download

    - name: Build
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: ${{ matrix.os == 'linux' && '1' || '0' }}
        CC: ${{ matrix.arch == 'arm64' && matrix.os == 'linux' && 'aarch64-linux-gnu-gcc' || '' }}
      run: |
        mkdir -p dist
        go build -ldflags "-w -s -X main.version=${{ github.ref_name }}" -o dist/host-monitor-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: host-monitor-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/host-monitor-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}
    
  build-macos:
    runs-on: macos-15
    strategy:
      matrix:
        include:
          - os: darwin
            arch: amd64
            ext: ""
          - os: darwin
            arch: arm64
            ext: ""

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get dependencies
      run: go mod download

    - name: Build
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: "1"
      run: |
        mkdir -p dist
        go build -ldflags "-w -s -X main.version=${{ github.ref_name }}" -o dist/host-monitor-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: host-monitor-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/host-monitor-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run tests
      run: go test -v ./...

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go code is not formatted:"
          gofmt -s -l .
          exit 1
        fi

  docker:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Generate Docker tags
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: stefanheim/host-monitor
        tags: |
          type=ref,event=branch
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    needs: [build, build-macos, test, docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate release tag
      id: tag
      run: |
        # Generiere Tag basierend auf Datum und Commit-Hash
        TAG="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated tag: $TAG"

    - name: Create release directory
      run: |
        mkdir -p release
        # Kopiere alle Artifacts in release Verzeichnis (v4 structure)
        find artifacts -name "host-monitor-*-*" -type f -exec cp {} release/ \;
        ls -la release/

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        body: |
          üöÄ **Automatisches Release vom main Branch**
          
          ## √Ñnderungen
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          
          ## Verf√ºgbare Binaries
          - `host-monitor-linux-amd64` - Linux x64
          - `host-monitor-linux-arm64` - Linux ARM64
          - `host-monitor-windows-amd64.exe` - Windows x64
          - `host-monitor-darwin-amd64` - macOS Intel
          - `host-monitor-darwin-arm64` - macOS Apple Silicon
          
          ## Docker Image
          - `stefanheim/host-monitor:latest` - Linux amd64
          - `stefanheim/host-monitor:main` - Latest main branch
          - `stefanheim/host-monitor:sha-${{ github.sha }}` - Specific commit
          
          ## Installation
          
          ### Binary
          1. Binary f√ºr deine Plattform herunterladen
          2. Ausf√ºhrbar machen: `chmod +x host-monitor-*`
          3. Ausf√ºhren: `./host-monitor-* --help`
          
          ### Docker
          ```bash
          docker run -v /:/host:ro --pid=host --network=host stefanheim/host-monitor:latest
          ```
          
          Automatisch generiert am $(date)
        files: release/*
        draft: false
        prerelease: false
        generate_release_notes: true